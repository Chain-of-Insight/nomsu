### Object Oriented Programming deals with things that have
    associated values and behaviors.
### Here, we define a Buffer to be a thing that has a .bits value:
(a Buffer) is (a thing) with [$bits]:
    ### And some methods:
    ($self, set up) means:
        ### This method runs when a new buffer is created
        $bits = []
    
    ### This method is used to add to a buffer
    ($self, add $bit) means:
        $bits, add $bit
    
    ### ($list, joined) is a list method that concatenates the list items:
    ($self, as text) means ($bits, joined)
    
    ### Write a method called ($self, length) that returns the sum
        of the lengths of each bit in the buffer:
    ($self, length) means:
        $sum = 0
        for $bit in $bits:
            ($sum += (#$bit))
        return $sum
        
### Create an instance of a Buffer:
$b = (a Buffer)
test that ($b is "a Buffer")
$b, add "xx"
$b, add "yyy"
test that (($b, as text) == "xxyyy")
test that (($b, length) == 5)

### You can define a thing that inherits the behaviors of another thing like this:
(a Backwards Buffer) is (a Buffer) with [$bits]:
    ### ($list, reversed) is a method that returns a copy of $list with
        the order of the items reversed.
    ($self, as text) means ($bits, reversed, joined)
$bb = (a Backwards Buffer)
$bb, add "one"
$bb, add "two"
test that (($bb, length) == (6))
test that (($bb, as text) == ("twoone"))

say("OK!")