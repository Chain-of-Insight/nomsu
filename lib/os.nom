#!/usr/bin/env nomsu -V4.10.12.7
#
    This file defines some actions that interact with the operating system and filesystem.
    
test:
    assume (nomsu files for "core")

externally (files for %path) means:
    %files = (=lua "Files.list(\%path)")
    if %files: %files = (List %files)
    return %files

externally (nomsu files for %path) means:
    for %nomsupath in (%package.nomsupath::all matches of "[^;]+"):
        %files = (files for "\%nomsupath/\%path")
        if %files: return %files

externally (sh> %cmd) means:
    lua> "\
        ..local result = io.popen(\%cmd)
        local contents = result:read("*a")
        result:close()
        return contents"

test:
    read file "lib/os.nom"

externally (read file %filename) means (=lua "Files.read(\%filename)")
test:
    for file %f in "core": do nothing

(for file %f in %path %body) parses as (for %f in (nomsu files for %path) %body)

# TODO: deprecate
#(%expr for file %f in %path) compiles to "\
    ..(function()
        local ret = List{}
        for i,\(%f as lua expr) in Files.walk(\(%path as lua expr)) do
            ret[#ret+1] = \(%expr as lua)
        end
        return ret
    end)()"

externally [..]
    write to file %filename %text, to file %filename write %text
    write %text to file %filename
..all mean:
    assume (%filename != "stdin") or barf "Cannot write to stdin"
    lua> "\
        ..local file = io.open(\%filename, 'w')
        file:write(\%text)
        file:close()"

externally (source lines of %tree) means:
    %source = (%tree.source if (%tree is syntax tree) else %tree)
    %file = (read file %source.filename)
    return (..)
        [..]
            :
                for % in (line number of %source.start in %file) to (..)
                    line number of %source.stop in %file
                ..: add (line % in %file)
        ..::joined with "\n"

externally (spoof file %text) means (%Files.spoof %text)
externally (spoof file %filename = %text) means (%Files.spoof %filename %text)
