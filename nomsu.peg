file:
    shebang?
    (ignored_line %nl)*
    (block / action / expression)?
    (%nl ignored_line)*
    (!. / (({} (.* -> "Parse error") %userdata) => error))

shebang: "#!" [^%nl]* (!. / %nl)

inline_block (Block):
    {| inline_statement (%ws* ";" %ws*  inline_statement)+ |}
block (Block):
    {| statement (nodent (statement / (({} ([^%nl]* -> "Error while parsing block line") %userdata) => error)))+ |}

statement: (action / expression) (eol / (({} ([^%nl]* -> "Error while parsing line") %userdata) => error))
inline_statement: inline_action / inline_expression

noindex_inline_expression:
    number / variable / inline_text / inline_list / inline_dict / inline_nomsu
    / ( "("
            %ws* (inline_block / inline_action / inline_expression) %ws*
        (")"
            / (({} ((!. / &%nl) -> 'Expected to find a ) before the end of the line') %userdata) => error)
            / (({} ([^%nl]* -> 'Error while parsing subexpression') %userdata) => error)
        )
      )
inline_expression:
    index_chain / noindex_inline_expression 
indented_expression:
    indented_text / indented_nomsu / indented_list / indented_dict
    / ("(..)"? indent
        (block / action / expression)
        (dedent / (({} (non_dedent_error -> "Error while parsing indented expression") %userdata) => error))
      )
expression:
    inline_expression / (":" %ws* (inline_block / inline_action / inline_expression) eol) / indented_expression

inline_nomsu (EscapedNomsu): "\" {| inline_expression |}
indented_nomsu (EscapedNomsu):
    "\" {| (noindex_inline_expression / (":" %ws* (inline_block / inline_action / inline_expression) eol) / indented_expression) |}

index_chain (IndexChain):
    {| noindex_inline_expression ("." (text_word / noindex_inline_expression))+ |}

-- Actions need at least one word in them
inline_action (Action):
    {|
    (inline_expression %ws*)* word (%ws* (inline_expression / word))*
    (%ws* ":" %ws* (inline_block / inline_action / inline_expression))?
    |}
action (Action):
    {| (expression (dotdot? %ws*))* word ((dotdot? %ws*) (expression / word))* |}

word: { %operator / (!number plain_word) }

text_word (Text): {%operator / (!number plain_word)}

inline_text (Text):
    !('".."' eol)
    '"' {|
        ({~ (('\"' -> '"') / ('\\' -> '\') / %escaped_char / [^%nl\"])+ ~}
        / inline_text_interpolation)*
    |} ('"' / (({} ([^%nl]*->'Failed to find a closing " mark on the same line') %userdata) => error))

-- Have to use "%indent" instead of "indent" etc. to avoid messing up text lines that start with "#"
indented_text (Text):
    '".."' eol %nl {|
        {~ (%nl*) (%indent -> "") ~}
        ({~
            (("\\" -> "\") / (("\" nodent "..") -> "")/ (%nl+ {~ %nodent -> "" ~}) / [^%nl\] / (!text_interpolation "\"))+
        ~} / text_interpolation)*
    |} (((!.) %dedent) / (&(%nl %dedent)) / (({} (non_dedent_error -> "Error while parsing Text") %userdata) => error))
inline_text_interpolation:
    "\" (
        variable / inline_list / inline_dict / inline_text
        / ("("
            %ws* (inline_block / inline_action / inline_expression) %ws*
        (")"
            / (({} (&%nl -> 'Expected to find a ")" before the end of the line') %userdata) => error)
            / (({} ([^%nl]* -> 'Error while parsing text interpolation') %userdata) => error))
        )
    )
text_interpolation:
    inline_text_interpolation /
    ("\" indented_expression nodent "..")

number (Number): (("-"? (([0-9]+ "." [0-9]+) / ("." [0-9]+) / ([0-9]+)))-> tonumber)

-- Variables can be nameless (i.e. just %) and can't contain operators like apostrophe
-- which is a hack to allow %'s to parse as "%" and "' s" separately
variable (Var): "%" { (plain_word ((!"'" %operator) / plain_word)*)? }

inline_list (List):
    !('[..]')
    "[" %ws* {| (inline_list_item (comma inline_list_item)* comma?)? |} %ws*
    ("]" / (({} ([^%nl]*->"Failed to find a closing ] on the same line") %userdata) => error))
indented_list (List):
    "[..]" indent
        {| list_line (nodent list_line)* |}
    (dedent / (({} (non_dedent_error -> "Error while parsing list") %userdata) => error))
list_line:
     ((action / expression) !comma)
     / (inline_list_item (comma list_line?)?)
inline_list_item: inline_block / inline_action / inline_expression

inline_dict (Dict):
    !('{..}')
    "{" %ws* {| (inline_dict_entry (comma inline_dict_entry)*)? |} %ws*
    ("}"
      / (({} (%ws* comma? (!. / &%nl)->"Failed to find a closing } on the same line") %userdata) => error)
      / (({} ([^%nl]*->"Error while parsing dictionary") %userdata) => error))
indented_dict (Dict):
    "{..}" indent
        {| dict_line (nodent dict_line)* |}
    (dedent / (({} (non_dedent_error -> "Error while parsing dict") %userdata) => error))
dict_line:
    (dict_entry !comma) / (inline_dict_entry (comma dict_line?)?)
dict_entry(DictEntry):
    {| dict_key %ws* ":" %ws* (action / expression) |}
inline_dict_entry(DictEntry):
    {| dict_key %ws* (":" %ws* (inline_block / inline_action / inline_expression)?) |}
dict_key:
    text_word / inline_expression

comment: "#" [^%nl]* (%nl+ %indent [^%nl]* (%nl+ %nodent [^%nl]*)* %dedent)?
eol_comment: "#" [^%nl]*

eol: %ws* eol_comment? (!. / &%nl)
ignored_line: (%nodent comment) / (%ws* (!. / &%nl))
indent: eol (%nl ignored_line)* %nl %indent (comment (%nl ignored_line)* nodent)?
nodent: eol (%nl ignored_line)* %nl %nodent
dedent: eol (%nl ignored_line)* (((!.) %dedent) / (&(%nl %dedent)))
non_dedent_error: (!dedent .)* eol (%nl ignored_line)* (!. / &%nl)
comma: %ws* "," %ws*
dotdot: nodent ".."
plain_word: ([a-zA-Z0-9_-] / %utf8_char)+
