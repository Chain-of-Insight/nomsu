#!/usr/bin/env nomsu -V4.8.10
#
    This file contains some definitions of text escape sequences, including ANSI console
    color codes.

use "core/metaprogramming.nom"

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

test:
    assume "\[1, 2, 3]" == "[1, 2, 3]"
    assume "foo = \(1 + 2)!" == "foo = 3!"
    assume "one\ntwo" == "\
        ..one
        two"
    assume "nogap" == "\
        ..no\
        ..gap"
    assume (["x", "y"]::joined with ",") == "x,y"
    assume (["x", "y"]::joined) == "xy"
    assume ("BAR"::byte 2) == 65
    assume ("BAR"::bytes 1 to 2) == [66, 65]
    assume ("asdf"::capitalized) == "Asdf"
    assume ("asdf"::uppercase) == "ASDF"
    assume ("asdf"::with "s" -> "X") == "aXdf"
    assume ("one\ntwo\n"::lines) == ["one", "two", ""]
    (%spec とは %body) parses as (%spec means %body)
test:
    %こんにちは = "こんにちは"
    (% と言う) とは "\(%)世界"
    assume (%こんにちは と言う) == "こんにちは世界"
(%expr for %match in %text matching %patt) compiles to:
    define mangler
    return (..)
        Lua "\
            ..(function()
                local \(mangle "comprehension") = _List{}
                for \(%match as lua expr) in (\(%text as lua expr)):gmatch(\(..)
                %patt as lua expr
            ..) do
                    \(mangle "comprehension")[#\(mangle "comprehension")+1] = \(%expr as lua statements)
                end
                return \(mangle "comprehension")
            end)()"

test:
    assume "\n" == (newline)

# Text literals
lua> "\
    ..do
        local escapes = {
            nl="\\\\n", newline="\\\\n", tab="\\\\t", bell="\\\\a", cr="\\\\r",
            ["carriage return"]="\\\\r", backspace="\\\\b", ["form feed"]="\\\\f",
            formfeed="\\\\f", ["vertical tab"]="\\\\v",
        };
        for name, e in pairs(escapes) do
            local lua = "'"..e.."'"
            compile.action[name] = function(compile, tree)
                return LuaCode(tree.source, lua)
            end
        end
    end"
