#!/usr/bin/env nomsu -V3.7.5.6
#
    This file contains some definitions of text escape sequences, including ANSI console
    color codes.

use "core/metaprogramming.nom"

test:
    assume "\[1, 2, 3]" == "[1, 2, 3]"
    assume "foo = \(1 + 2)!" == "foo = 3!"
    assume (..)
        ".."
            one
            two
        ..== "one\ntwo"
    assume (..)
        ".."
            no\
            ..gap
        ..== "nogap"
    assume (["x", "y"]::joined with ",") == "x,y"
    assume (["x", "y"]::joined) == "xy"
    assume ("BAR"::byte 2) == 65
    assume ("BAR"::bytes 1 to 2) == [66, 65]
    assume ("asdf"::capitalized) == "Asdf"
    assume ("asdf"::uppercase) == "ASDF"
    assume ("asdf"::with "s" -> "X") == "aXdf"
    assume ("one\ntwo\n"::lines) == ["one", "two", ""]
    
    parse [アクション %spec %body] as (action %spec %body)
test:
    %こんにちは = "こんにちは"
    アクション [% と言う] "\(%)世界"
    assume (%こんにちは と言う) == "こんにちは世界"

# Text functions
parse [%texts joined with %glue] as (%texts::joined with %glue)
parse [%texts joined, joined %texts] as (%texts::joined)
parse [byte %i of %text] as (%text::byte %i)
parse [bytes %start to %stop of %text] as (%text::bytes %start to %stop)
parse [bytes of %text] as (%text::bytes)
parse [capitalized %text, %text capitalized] as (%text::capitalized)
parse [uppercase %text, %text uppercase] as (%text::uppercase)
parse [..]
    %text with %sub instead of %patt, %text with %patt replaced by %sub
    %text s/ %patt / %sub
..as (%text::with %patt -> %sub)
parse [%text matches %pattern] as (%text::matches %pattern)
parse [%text matching %pattern] as ((%text::matching %pattern).1)

compile [for %match in %text matching %patt %body] to (..)
    Lua ".."
        for \(%match as lua expr) in (\(%text as lua expr)):gmatch(\(%patt as lua expr)) do
            \(%body as lua statements)
            \(compile as (===next %match ===))
        end
        \(compile as (===stop %match ===))

compile [%expr for %match in %text matching %patt] to (..)
    Lua value ".."
        (function()
            local ret = _List{}
            for \(%match as lua expr) in (\(%text as lua expr)):gmatch(\(..)
            %patt as lua expr
        ..) do
                ret[#ret+1] = \(%expr as lua statements)
            end
            return ret
        end)()

test:
    assume "\n" == (newline)

# Text literals
lua> ".."
    do
        local escapes = {
            nl="\\\\n", newline="\\\\n", tab="\\\\t", bell="\\\\a", cr="\\\\r",
            ["carriage return"]="\\\\r", backspace="\\\\b", ["form feed"]="\\\\f",
            formfeed="\\\\f", ["vertical tab"]="\\\\v",
        };
        for name, e in pairs(escapes) do
            local lua = "'"..e.."'"
            COMPILE_ACTIONS[name] = function(nomsu, tree)
                return LuaCode.Value(tree.source, lua)
            end
        end
    end
